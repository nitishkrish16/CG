from prettytable import PrettyTable
import numpy as np

#-------------------------------------------------------------------------------------------------------------------------------
def forward(A, pi, B, observations):
    M = len(observations)
    N = pi.shape[0]

    alpha = np.zeros((M, N))

    # Initialization
    alpha[0, :] = pi * B[:, observations[0]]

    # Induction
    for t in range(1, M):
        for j in range(N):
            alpha[t, j] = np.sum(alpha[t-1] * A[:, j] * B[j, observations[t]])

    return alpha,np.sum(alpha[M-1,:])

#-------------------------------------------------------------------------------------------------------------------------------
def viterbi(A, pi, B, observations):
    M = len(observations)
    N = pi.shape[0]
    delta = np.zeros((M, N))
    psi = np.zeros((M, N), dtype=int)

    # Initialization
    delta[0] = pi * B[:, observations[0]]
    # Recursion
    for t in range(1, M):
        for j in range(N):
            trans_prob = delta[t - 1] * A[:, j]
            max_trans_prob = np.max(trans_prob)
            psi[t,j] = np.argmax(trans_prob)
            delta[t,j] = max_trans_prob * B[j, observations[t]]

    # Termination
    best_path_prob = np.max(delta[M - 1])
    # Backtrack
    best_path= np.zeros(M,dtype=int)
    best_path[M-1]=np.argmax(delta[M-1])
    for t in range(M-2,-1,-1):
        best_path[t]=psi[t+1,best_path[t+1]]

    return delta,best_path,best_path_prob

#-------------------------------------------------------------------------------------------------------------------------------
def main():
    states = (0, 1)
    observations = [2, 2, 1, 0]

    # Transition Probabilities
    A = np.array([[0.5 ,0.5], [0.4 ,0.6]])
    # Initial Probabilities
    pi = np.array([0.5 ,0.5])
    # Emission Probabilities
    B = np.array([[0.2 ,0.3 ,0.3 ,0.2], [0.3 ,0.2 ,0.2 ,0.3]])
    tab,prob = forward(A, pi, B, observations)
    two_d_list = tab.tolist()
    table = PrettyTable()
    table.field_names = ["Step", "First Value", "Second Value"]
    for i, row in enumerate(two_d_list):
        table.add_row([i+1] + row)
    print('\n---------------------------------------------------------------------------------------')
    print("\t\t\t\tForward Approach ")
    print('---------------------------------------------------------------------------------------')
    print("\n\tProbability table: \n\n", table)
    print("\n\tProbability of observing sequence is: ", prob)
    print('\n---------------------------------------------------------------------------------------')

    #---------------------------------------------------------
    #       If input in log form  just apply np.exp()
    #---------------------------------------------------------
    observations = [2, 2, 1, 0, 1, 3, 2, 0, 0]
    # Transition Probabilities
    A = np.array([[-1,-1], [-1.322 ,-0.737]])
    # Initial Probabilities
    pi = np.array([-1 ,-1])
    # Emission Probabilities
    B = np.array([[-2.322 ,-1.737 ,-1.737 ,-2.322], [-1.737 ,-2.322 ,-2.322 ,-1.737]])
    A = np.exp2(A)
    pi = np.exp2(pi)
    B = np.exp2(B)
    tab,best_path, best_path_prob = viterbi(A, pi, B, observations)
    two_d_list = tab.tolist()
    table = PrettyTable()
    table.field_names = ["Step", "First Value", "Second Value"]
    for i, row in enumerate(two_d_list):
        table.add_row([i+1] + row)
    print('\n---------------------------------------------------------------------------------------')
    print("\t\t\t\tViterbi Method")
    print('---------------------------------------------------------------------------------------')
    print("\n\tProbability Table : \n\n",table)
    print("\n\tThe most probable path is: ", best_path)
    print("\tThe probability of the most probable path is: ", best_path_prob)
    print('\n---------------------------------------------------------------------------------------')


#-------------------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":
    main()

---------------------------------------------------

#Forward algorithm
#transition probabilities
ST = {'H':0.5,'L':0.5}
HT = {'H':0.5,'L':0.5}
LT = {'H':0.4,'L':0.6}

#emission probabilities
HE = {'A':0.2,'C':0.3,'G':0.3,'T':0.2}
LE = {'A':0.3,'C':0.2,'G':0.2,'T':0.3}

seq = 'GGCA'

curr={'H':0,'L':0}
curr['H']=ST['H']*HE[seq[0]]
curr['L']=ST['L']*LE[seq[0]]
print(curr)
for i in range(1,len(seq)):
  htemp=(curr['H']*HT['H']*HE[seq[i]]) + (curr['L']*LT['H']*HE[seq[i]])
  ltemp=(curr['H']*HT['L']*LE[seq[i]]) + (curr['L']*LT['L']*LE[seq[i]])
  curr['H']=htemp
  curr['L']=ltemp
  print(curr)
print("Probability of sequence " + seq + ": " + str(curr['H']+curr['L']))

#Viterbi algorithm
#transition probabilities
ST = {'H':-1,'L':-1}
HT = {'H':-1,'L':-1}
LT = {'H':-1.322,'L':-0.737}

#emission probabilities
HE = {'A':-2.322,'C':-1.737,'G':-1.737,'T':-2.322}
LE = {'A':-1.737,'C':-2.322,'G':-2.322,'T':-1.737}

seq = 'GGCACTGAA'

p={'H':0,'L':0}
p['H']=ST['H']+HE[seq[0]]
p['L']=ST['L']+LE[seq[0]]
print(p)
op = {0:[p['H'],p['L']]}
for i in range(1,len(seq)):
  htemp=HE[seq[i]]+max(p['H']+HT['H'],p['L']+LT['H'])
  ltemp=LE[seq[i]]+max(p['H']+HT['L'],p['L']+LT['L'])
  p['H']=round(htemp,3)
  p['L']=round(ltemp,3)
  op[i] = [p['H'],p['L']]
  print(p)
# print(op)
path=''

for i in op:
   # print(op[i])
   ip = op[i]
   if ip[0]>ip[1]:
    path += 'H'
   else:
    path += 'L'
print("Path: " + path)
print("Probability: " + str(2**p[path[-1]]))


#MDP
# Define the states and their initial values
states = {
    "Poor & Unknown": 0,
    "Poor & Famous": 0,
    "Rich & Famous": 10,
    "Rich & Unknown": 10
}
states_intial = {
    "Poor & Unknown": 0,
    "Poor & Famous": 0,
    "Rich & Famous": 10,
    "Rich & Unknown": 10
}

# Define the transitions with probabilities
transitions = {
    "Poor & Unknown": {"Poor & Unknown": [1, 0.5], "Poor & Famous": [0, 0.5], "Rich & Famous": [0, 0], "Rich & Unknown": [0, 0]},
    "Poor & Famous": {"Poor & Unknown": [0.5, 0], "Poor & Famous": [0, 1], "Rich & Famous": [0.5, 0], "Rich & Unknown": [0, 0]},
    "Rich & Famous": {"Poor & Unknown": [0, 0], "Poor & Famous": [0, 1], "Rich & Famous": [0.5, 0], "Rich & Unknown": [0.5, 0]},
    "Rich & Unknown": {"Poor & Unknown": [0.5, 0.5], "Poor & Famous": [0, 0.5], "Rich & Famous": [0, 0], "Rich & Unknown": [0.5, 0]}
}

# Define the discount factor
discount_factor = 0.9
print("Iteration 0:")
print("PU: {:.3f}, PF: {:.3f}, RU: {:.3f}, RF: {:.3f}".format(states_intial["Poor & Unknown"], states_intial["Poor & Famous"], states_intial["Rich & Unknown"], states_intial["Rich & Famous"]))
# Iterate the process for three times
for iteration in range(3):
    print(f"Iteration {iteration + 1}:")
    for state in states:
        max_value = max(sum(transitions[state][next_state][0]* states_intial[next_state] for next_state in transitions[state]),sum(transitions[state][next_state][1]* states_intial[next_state] for next_state in transitions[state]))
        states_intial[state] =states[state]+ discount_factor*max_value
    print("PU: {:.3f}, PF: {:.3f}, RU: {:.3f}, RF: {:.3f}".format(states_intial["Poor & Unknown"], states_intial["Poor & Famous"], states_intial["Rich & Unknown"], states_intial["Rich & Famous"]))
